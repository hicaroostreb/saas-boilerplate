name: Enterprise CI Pipeline

on:
  push:
    branches: [main, develop, "feature/**", "fix/**", "hotfix/**"]
  pull_request:
    branches: [main, develop]
  schedule:
    # Weekly security audit (Sundays at midnight UTC)
    - cron: "0 0 * * 0"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "18.17.0"
  PNPM_VERSION: "9.12.0"

jobs:
  quality-assurance:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Cache Turborepo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Enterprise QA Pipeline
        run: pnpm qa:ci
        env:
          NODE_ENV: test

  end-to-end-tests:
    runs-on: ubuntu-latest
    needs: quality-assurance
    if: contains(fromJson('["main", "develop"]'), github.ref_name) || contains(github.event.head_commit.message, '[e2e]')
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm test:install

      - name: Build applications
        run: pnpm build

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          CI: true
          BROWSER: ${{ matrix.browser }}

      - name: Upload E2E artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts-${{ matrix.browser }}-${{ github.sha }}
          path: |
            packages/e2e/test-results/
            packages/e2e/playwright-report/
          retention-days: 7

  security-audit:
    runs-on: ubuntu-latest
    if: github.event.schedule || contains(github.event.head_commit.message, '[security]') || github.ref == 'refs/heads/main'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security Audit
        run: pnpm qa:security

      - name: Generate Security Report
        if: failure()
        run: |
          echo "## Security Audit Failed" >> security-report.md
          echo "### Audit Results:" >> security-report.md
          pnpm audit --json > audit-report.json 2>/dev/null || true
          echo "\`\`\`json" >> security-report.md
          cat audit-report.json >> security-report.md 2>/dev/null || echo "No audit data available" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "### Dependencies Check:" >> security-report.md
          echo "\`\`\`" >> security-report.md
          pnpm deps:check >> security-report.md 2>/dev/null || echo "No outdated dependencies found" >> security-report.md
          echo "\`\`\`" >> security-report.md

      - name: Upload Security Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report-${{ github.sha }}
          path: |
            audit-report.json
            security-report.md
          retention-days: 30

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-audit]
    if: github.ref == 'refs/heads/main' && success()
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Production Build Verification
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            apps/*/.next
            packages/*/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Deployment Ready âœ…
        run: echo "ðŸš€ Main branch is ready for deployment!"
